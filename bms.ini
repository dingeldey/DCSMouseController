; ======================================================================
; INPUT BINDINGS — Syntax Reference (current feature set)
; ======================================================================

; ----------------------------------------------------------------------
; [input] OPTIONS (global)
; ----------------------------------------------------------------------
; You can set global behavior here:
;   axis_mode        = relative | absolute        ; default: relative
;   axis_deadzone    = 0.0–1.0                    ; default: 0.05
;   axis_speed       = integer pixels/sec         ; default: 400
;   axis_poll_hz     = integer                    ; default: 250
;   debug_inputs     = true|false                 ; default: false
;   log_buttons      = true|false                 ; default: false
;   log_axes         = true|false                 ; default: false
;
; Global modifier (one only):
;   modifier = dev:<index|GUID>:button:<n>
;   ; or an axis-as-button style:
;   modifier = dev:<index|GUID>:axis:<id>:<pos|neg|abs>:<threshold>
;
; Wiggle initial state (ON/OFF) with optional parameters:
;   wiggle_initially_on = <bool>[:<pixels>[:<ms>]]
;     <bool>    → true|false|1|0|yes|no|on|off
;     <pixels>  → wiggle amplitude (default 5)
;     <ms>      → wiggle period in ms (default 1000)
;   Examples:
;     wiggle_initially_on = true
;     wiggle_initially_on = true:1:500     ; small, fast wiggle
;     wiggle_initially_on = false:10:500   ; OFF at start (values saved for later toggles)

; ----------------------------------------------------------------------
; GLOBAL MODIFIER (M)
; ----------------------------------------------------------------------
; While the modifier is HELD:
;   • Only bindings that end with “:M” are active (modifier layer).
;   • All base-layer bindings (without “:M”), both BUTTONS and AXES,
;     are globally inhibited/ignored.
; When the modifier is NOT held:
;   • Only base-layer bindings (without “:M”) are active.
;   • All “:M” bindings are ignored.
;
; Add “:M” at the END of the binding’s left-hand side to place it
; on the modifier layer (examples below).

; ----------------------------------------------------------------------
; DEVICE REFERENCES
; ----------------------------------------------------------------------
; You can target a device by index (0,1,2,…) or by GUID (as logged on start):
;   dev:<index>                  ; e.g., dev:0
;   dev:<GUID>                   ; e.g., dev:0300abcd...feed
;
; Examples:
;   dev:0:button:1               ; first button on device index 0
;   dev:0300abcd...:button:3     ; button 3 on device with that GUID

; ----------------------------------------------------------------------
; INPUT TYPES (LEFT-HAND SIDE)
; ----------------------------------------------------------------------
; Buttons (INI is 1-based; internally converted to 0-based):
;   dev:<idx|GUID>:button:<n>
;
; Analog axis (continuous):
;   dev:<idx|GUID>:axis:<id>
;   → Valid only with mouse axes outputs (mouse_x, mouse_y).
;
; Axis-as-button (digital) — two equivalent syntaxes:
;   Legacy mode/threshold:
;     dev:<...>:axis:<id>:<pos|neg|abs>:<threshold>
;     Meaning:
;       pos → active if axis >  threshold
;       neg → active if axis < -threshold
;       abs → active if |axis| > threshold
;
;   Comparator syntax (maps to the same logic):
;     Inline comparator:
;       dev:<...>:axis:<id><op><value>
;       Examples:  axis:1>0.6   axis:1<-0.6
;     Tokenized comparator:
;       dev:<...>:axis:<id>:<op>:<value>
;       Examples:  axis:1:>:0.6  axis:1:<:-0.6
;     Notes:
;       • Use “>”/“>= v” with positive v → behaves like pos v
;       • Use “<”/“<= v” with negative v → behaves like neg |v|
;       • ‘abs’ is only available via the legacy form.
;
; Modifier layer marker (applies to ANY of the above):
;   Append “:M” at the very end:
;     dev:0:button:4:M
;     dev:0:axis:1>0.6:M
;     dev:0:axis:1:<:-0.6:M
;
; Runtime behavior with the global inhibit:
;   • Modifier held  → only “…:M” bindings fire (base suppressed).
;   • Modifier idle  → only base bindings fire (“:M” suppressed).

; ----------------------------------------------------------------------
; OUTPUT TYPES (RIGHT-HAND SIDE)
; ----------------------------------------------------------------------
; Keys:
;   A, F1, Shift+F12, Ctrl+Alt+Del, Win+R, 0–9, etc.
;   Modes:
;     A                    → short press (30 ms default)
;     A:single             → explicit short press (30 ms default)
;     A:single:<ms>        → short press with custom hold time
;     A:hold               → press on input down, release on input up
;     A:toggle             → toggles on/off on each press
;
; Mouse buttons:
;   MB1 (Left), MB2 (Right), MB3 (Middle), MB4 (X1), MB5 (X2)
;   Modes:
;     MB1                  → click (30 ms default)
;     MB1:single           → same as above
;     MB1:single:<ms>      → click held for <ms> ms
;     MB1:hold             → down while input is held, up on release
;     MB1:toggle           → toggles down/up on each press
;
; Mouse wheel:
;   WheelUp, WheelDown
;   Modes:
;     WheelUp              → one tick
;     WheelUp:single       → one tick (explicit)
;     WheelUp:hold:<init>:<max>:<ms>
;         init = ticks/sec at start
;         max  = max ticks/sec
;         ms   = time to ramp from init → max
;
; Mouse axes (only for analog axis inputs on LHS):
;   mouse_x, mouse_y
;   Example: dev:0:axis:0 => mouse_x
;
; CenterMouse (cursor warp/center):
;   CenterMouse:<targetType>:<targetName>:<frac|px>:[<x,y>]
;     targetType = Virtual | Monitor | WindowClass | WindowName
;     targetName = monitor index (for Monitor) or class/title string
;     coords     = [x,y] as fractions (0.0–1.0) or pixels “px”
;
; WiggleMouse (toggle):
;   WiggleMouse:<mode>:<pixels>:<ms>
;     mode   = relative | absolute
;     pixels = amplitude (px)
;     ms     = period
;   Always runs as a toggle: press once to start, again to stop.
;   Tip: combine with wiggle_initially_on=true to boot with wiggle active.
;
; FocusWindow:
;   FocusWindow:<targetType>:<targetName>
;     targetType = WindowClass | WindowName
;
; MouseInc / MouseDec (continuous cursor nudge):
;   MouseInc:<axis>:<mode>:hold:<init>:<max>:<ms>
;   MouseDec:<axis>:<mode>:hold:<init>:<max>:<ms>
;     axis  = x | y
;     mode  = relative | absolute
;     init  = ticks/sec at start
;     max   = max ticks/sec
;     ms    = ramp time in ms
;
; ----------------------------------------------------------------------
; OUTPUT MODES (summary)
; ----------------------------------------------------------------------
; :single          → fires once on press (default 30 ms unless overridden)
; :single:<ms>     → fires once with custom press duration
; :hold            → down while input is held, up on release
; :toggle          → toggles on/off each press
;
; ----------------------------------------------------------------------
; EXAMPLES
; ----------------------------------------------------------------------
; key_mappings = \
;   dev:0:button:1           => A, \
;   dev:0:button:2           => Ctrl+Shift+A:hold, \
;   dev:0:button:3           => MB1:single:50, \
;   dev:0:button:4           => WheelUp:hold:5:30:1000, \
;   dev:0:axis:0>0.5         => F5:single:200, \
;   dev:0:axis:1             => mouse_y, \
;   dev:0:button:5:M         => MB2:hold, \
;   dev:0:axis:2:abs:0.6:M   => Ctrl+Alt+Del:toggle, \
;   dev:0:axis:3<-0.6:M      => MB1:hold, \
;   dev:0:axis:3:>:0.6:M     => MB2:hold, \
;   dev:0:button:6           => CenterMouse:Virtual:frac:[0.5,0.5], \
;   dev:0:button:7           => CenterMouse:Monitor:1:px:[200,200], \
;   dev:0:button:8           => FocusWindow:WindowClass:Notepad, \
;   dev:0:button:9           => WiggleMouse:relative:5:2000, \
;   dev:0:button:10          => MouseInc:x:relative:hold:5:30:1000, \
;   dev:0:button:11          => MouseDec:y:absolute:hold:10:40:1500
;
; axis_mappings = \
;   dev:0:axis:0             => mouse_x, \
;   dev:0:axis:1             => mouse_y
;
; Remember: with the modifier HELD, only the “:M” entries above are active;
; base entries are ignored until the modifier is released.
; ======================================================================




[input]
wiggle_initially_on  = false:10:500
modifier = dev:03003d0698400000aabe000000000000:button:8

; Key bindings (list form)
; key maps with per-binding modes

; Keys are applied from bottom to top
key_mappings =  dev:0300e98998400000a8be000000000000:button:26 => FocusWindow:WindowClass:FalconDisplay, \
                dev:0300e98998400000a8be000000000000:button:26 => WiggleMouse:relative:1:100, \
                dev:03003d0698400000aabe000000000000:axis:2<-0.6 => WheelUp:hold:1:30:1000, \
                dev:03003d0698400000aabe000000000000:axis:2>0.6  => WheelDown:hold:1:30:1000, \

; Axis bindings (list form);
; Axis steering mode: "relative" (default) or "absolute"
axis_mode = relative
; --- Axis movement acceleration ---; Axis deadzone
axis_deadzone = 0.025
axis_speed      = 1000

axis_mappings = dev:03003d0698400000aabe000000000000:axis:2:M => mouse_x, \
                dev:03003d0698400000aabe000000000000:axis:3:M => mouse_y


; Debugging
debug_inputs = false   ; global debug (overrides others if true)
log_buttons  = false   ; log button press/release
log_axes     = false   ; log axis values when applied (not every poll)

