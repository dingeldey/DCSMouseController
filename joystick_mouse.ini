[input]
; ======================================================================
; Device selection is PER-BINDING via devIdx:<index> or dev:<GUID>.
; There is NO global primary device in this INI.
; Find GUIDs and indices in the program's startup printout.
; Pick another INI at launch:  DCSMouseController.exe --config myprofile.ini
; ======================================================================

; --- Global modifier (advanced; required if you use 'M' in bindings) ---
; Choose device by index or GUID, and the 1-based button number:
;   modifier = devIdx:1:button:6
;   modifier = dev:03000000b50700001572000011010000:button:6
; Optional trailing ':M' is accepted but ignored here.
modifier = dev:0300aab44f04000006b1000000000000:button:8

; ── Binding syntax (works for ALL entries below) ───────────────────────
; Button:             devIdx:<dev>:button:<btn>[M|:M]   OR   dev:<GUID>:button:<btn>[M|:M]
; Axis-as-button:     devIdx:<dev>:axis:<axis>:<pos|neg|abs>:<thr>[M|:M]
;                     dev:<GUID>:axis:<axis>:<pos|neg|abs>:<thr>[M|:M]
; Analog axis (X/Y):  devIdx:<dev>:axis:<axis>[M|:M]    OR   dev:<GUID>:axis:<axis>[M|:M]
; (Legacy numeric-only entries still parse using internal default device 0,
;  but it's recommended to specify devices explicitly.)

; --- Toggle (OFF binding removed; toggle handles both states) ---
button_toggle = devIdx:0300aab44f04000006b1000000000000:button:5

; --- Movement nudges (mix devices if you like) ---
button_inc_x =              ;devIdx:0:button:12:M
button_dec_x =              ;devIdx:0:button:11:M
button_inc_y =              ;devIdx:0:button:9:M
button_dec_y =              ;devIdx:0:button:10:M

nudge_velocity_px_s = 1200
wiggle_one_pixel = true

; --- Hold-acceleration for nudge buttons (time-based ramp) ---
; When holding a nudge (inc/dec), after a short delay the velocity ramps
; from 1.0× up to hold_accel_max× over the ramp duration.
hold_accel_enable   = true   ; master switch
hold_accel_after_ms = 250    ; delay before ramp begins
hold_accel_ramp_ms  = 1500   ; time to reach max multiplier
hold_accel_max      = 3.0    ; cap multiplier (>= 1.0)

; --- Analog cursor movement (axes; may come from different device) ---
axis_x = devIdx:0300aab44f04000006b1000000000000:axis:0
axis_y = devIdx:0300aab44f04000006b1000000000000:axis:1

; Axes configurations deadzones and invert
axis_deadzone_x = 0.01
axis_deadzone_y = 0.01
axis_invert_x = false
axis_invert_y = false
axis_velocity_px_s = 400
axis_button_hysteresis = 0.10

; --- Mouse buttons & wheel (buttons or axis-thresholds; mix devices) ---
button_mouse_left = devIdx:0300954b9840000064bd000000000000:button:32,devIdx:0300954b9840000064bd000000000000:button:34  ; devIdx:0300e98998400000a8be000000000000:axis:3:pos:0.5:M,devIdx:0300e98998400000a8be000000000000:button:26                      ;devIdx:0:button:2
button_mouse_right = devIdx:0300954b9840000064bd000000000000:button:28    ; devIdx:0300e98998400000a8be000000000000:axis:3:neg:0.5:M                       ;devIdx:0:button:4
button_wheel_up    = devIdx:0300954b9840000064bd000000000000:button:33   ; devIdx:0300e98998400000a8be000000000000:axis:2:pos:0.5:M                       ;devIdx:0:button:8
button_wheel_down  = devIdx:0300954b9840000064bd000000000000:button:29   ; devIdx:0300e98998400000a8be000000000000:axis:2:neg:0.5:M                       ;devIdx:0:button:7
wheel_ticks_per_second = 30

; --- Keyboard mappings (digital; held while binding is active) ---
; Multiple entries separated by commas; newlines allowed.
; Format:  <binding> => <key combo>
; Examples:
;   key_map = devIdx:1:button:1 => Ctrl+F1, \
;             dev:0300e98998400000a8be000000000000:axis:2:pos:0.60 => A, \
;             devIdx:0:axis:5:neg:0.50:M => Alt+Tab
key_map = devIdx:0300aab44f04000006b1000000000000:axis:0:pos:0.60 => A

; --- Monitor & target (used when not centering in window) ---
monitor_index = 2
x_frac = 0.5
y_frac = 0.5
x =
y =

; Limit the target to: monitor | virtual | window
; NOTE: If you set clamp_space = window, you MUST also set either
;       focus_window_class OR focus_window_title below, otherwise the program will abort.
clamp_space = virtual

; --- Optional window targeting (Windows only) ---
focus_on_toggle = true                  ; focus a specific window when toggling ON
focus_window_title =                    ; case-insensitive substring match (use this OR class)
focus_window_class = DCS                ; exact window class (preferred over title)
window_restore_if_minimized = false     ; restore from taskbar before focusing
window_force_foreground = true          ; last-resort foreground grab (sends ALT)

; Center inside that window on toggle-ON (client area)
center_in_window_on_toggle = false
window_x_frac = 0.5                     ; 0..1 within client area (needs both x_frac & y_frac)
window_y_frac = 0.5
; window_x = 640                        ; px within client area (needs both x & y)
; window_y = 360

; --- Repeater & loop ---
repeat_ms = 3000
poll_hz = 250
startup_grace_ms = 200

; --- Windows input path (recommended for sims) ---
use_sendinput = true

; --- Behavior / debug ---
toggle_feedback = false
log_apply = false
debug_buttons = false       ; prints 1-based button edges with dev index
debug_io = false            ; view monitored inputs & outputs
debug_window = false        ; print matched window, rects, focus results

; Optional:
; restore_on_off = false
